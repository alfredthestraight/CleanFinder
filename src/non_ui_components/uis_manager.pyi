# This file was generated by Nuitka

# Stubs included by default
from __future__ import annotations
from PySide6.QtCore import QTimer, Qt
from PySide6.QtWidgets import QMainWindow
from src.non_ui_components.user_actions import UserActionsManager
from src.shared.locations import RESULTS_PATH, SYSTEM_ROOT_DIR
from src.shared.vars import conf_manager, logger
from src.ui_components.ui import ui
from src.utils.os_utils import dir_, extract_filename_from_path, extract_parent_path_from_path, get_all_items_in_path, get_clipboard_copied_files_paths
from src.utils.pasting_items import PastingManager, TableWithRadioButtons
from typing import Any
from typing_extensions import Self
import numpy
import os
import pickle
import time

class PastingDelegate:
    def __init__(self: Self, ui_manager: Any) -> None: ...
    def paste_items_from_clipboard(self: Self, dest_path: str, delete_source_after_paste: bool) -> Any: ...
    def paste_items(self: Self, dest_path: str, copied_file_paths: Any, delete_source_after_paste: bool, rename_item_names_in_dest: list[tuple[str, str]]) -> Any: ...
    def get_pasting_conflicts(self: Self, dest_path: str, copied_file_paths: list[str]) -> Any: ...
    def paste_items_via_thread(self: Self, copied_file_paths: list[str], dest_path: str, delete_source_after_paste: bool, rename_item_names_in_dest: list[tuple[str, str]], item_names_to_keep_both: list[str]) -> Any: ...
    def safetly_kill_all_threads(self: Self) -> Any: ...

class UiWindowManager(QMainWindow):
    def __init__(self: Self) -> None: ...
    def save_columns_sorting_scheme_per_path(self: Self, path: str) -> Any: ...
    def get_columns_sorting_scheme_per_path(self: Self, column_order_per_path_file_path: str) -> Any: ...
    def create_columns_sorting_scheme(self: Self, columns_sorting_order: list[int], is_ascending_per_col: bool) -> Any: ...
    def refresh_all_uis(self: Self) -> Any: ...
    def reload_keyboard_shortcuts(self: Self) -> Any: ...
    def remove_paths_and_subpaths_from_browsing_histories(self: Self, paths: list[str]) -> Any: ...
    def paste_items_from_clipboard(self: Self, dest_path: str, delete_source_after_paste: bool) -> Any: ...
    def paste_items(self: Self, dest_path: str, source_paths: list[str], delete_source_after_paste: bool, rename_item_names_in_dest: list[tuple[str, str]]) -> Any: ...
    def keep_last_action(self: Self, action: Any) -> Any: ...
    def undo_last_action(self: Self) -> Any: ...
    def redo_last_undone_action(self: Self) -> Any: ...
    def select_pasted_items_where_ui_is_in_path(self: Self, path: str, items: list[str]) -> Any: ...
    def switch_ordering_of_file_explorer_column(self: Self, col_ind: int, path: str) -> Any: ...
    def get_columns_ordering_scheme(self: Self, path: str) -> Any: ...
    def cut_items_names(self: Self) -> Any: ...
    def cut_items_names(self: Self, newpaths: list[str]) -> Any: ...
    def cut_items_path(self: Self) -> Any: ...
    def cut_items_path(self: Self, path: str) -> Any: ...
    def cancel_cut_items(self: Self) -> Any: ...
    def create_new_window(self: Self, root_dir_path: str, ydim: int, file_explorer_width: int, left_pane_width: int) -> Any: ...
    def when_timer_finishes(self: Self) -> Any: ...
    def stop_monitoring(self: Self) -> Any: ...
    def start_monitoring(self: Self) -> Any: ...
    def refresh_all_configurations(self: Self) -> Any: ...
    def show_or_hide_left_panes(self: Self) -> Any: ...
    def on_ui_close(self: Self, ui: Any) -> Any: ...


__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import time
import os
import pickle
import numpy
import PySide6
import PySide6.QtCore
import PySide6.QtWidgets
import src
import src.shared
import src.shared.locations
import src.shared.vars
import src.utils
import src.utils.os_utils
import src.utils.pasting_items
import src.non_ui_components
import src.non_ui_components.user_actions
import src.ui_components
import src.ui_components.ui
import posixpath