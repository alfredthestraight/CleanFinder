# This file was generated by Nuitka

# Stubs included by default
from __future__ import annotations
from PySide6 import QtCore, QtWidgets
from PySide6.QtCore import QItemSelectionModel, QThread, QTimer, Qt, Signal
from PySide6.QtGui import QBrush, QColor, QCursor, QFont
from PySide6.QtWidgets import QDialog, QHBoxLayout, QLabel, QLineEdit, QMessageBox, QPushButton, QVBoxLayout
from src.shared.vars import conf_manager, logger, threads_server
from src.ui_components.misc_widgets.dialogs_and_messages import message_box_w_arrow_keys_enabled
from src.utils.os_utils import delete_item, dir_, extract_extension_from_path, extract_filename_from_path, move_to_trash, open_application
from src.utils.utils import get_max_integer_suffix_among_strings_with_prefix
from typing import Any
from typing_extensions import Self
import os
import zipfile

def map_shortcut_name_to_func(file_explorer_obj: Any, action_name: str) -> Any:
    ...

class change_items_names_case:
    def __init__(self: Self, encompassing_obj: Any, case: Any) -> None: ...
    def to_lowercase(self: Self, filename: Any) -> Any: ...
    def to_uppercase(self: Self, filename: Any) -> Any: ...
    def __call__(self: Self) -> Any: ...

class open_file_as_app:
    def __init__(self: Self, app_path: Any) -> None: ...
    def __call__(self: Self) -> Any: ...

def next_new_dir_name(curr_directories_names: list[str], new_dir_name: str) -> Any:
    ...

class paths_history:
    def __init__(self: Self, path: str) -> None: ...
    def clear_history(self: Self) -> Any: ...
    def has_history(self: Self) -> Any: ...
    def has_forward_paths(self: Self) -> Any: ...
    def add_path(self: Self, newpath: str) -> Any: ...
    def prev_path(self: Self) -> Any: ...
    def next_path(self: Self) -> Any: ...
    def curr_path(self: Self) -> Any: ...
    def move_to_path_in_direction(self: Self, direction: int) -> Any: ...
    def move_to_prev_path(self: Self) -> Any: ...
    def move_to_next_path(self: Self) -> Any: ...
    def reset_head_to_current_path(self: Self) -> Any: ...
    def remove_paths_and_subpaths_from_history(self: Self, paths: list[str]) -> Any: ...

class RowSelectionExtender:
    def __init__(self: Self, encompassing_obj: Any) -> None: ...
    def reset(self: Self) -> Any: ...
    def calc_selection_update(self: Self, direction: int, current_rows: list[int]) -> (int, int, int): ...
    def __call__(self: Self, direction: int) -> Any: ...

class QLineEdit_EditFinenameExcludingExtension(QLineEdit):
    def focusInEvent(self: Self, event: Any) -> Any: ...

class MyStyledItem:
    def __init__(self: Self, view: Any, margin: Any, radius: Any, border_color: Any, border_width: Any, grid_type: Any, parent: Any) -> None: ...
    def set_row_hover_brush_color(self: Self, r: int, g: int, b: int) -> Any: ...
    def set_disabled_row_hover_brush_color(self: Self, r: int, g: int, b: int) -> Any: ...
    def initStyleOption(self: Self, option: Any, index: Any) -> Any: ...
    def sizeHint(self: Self, option: Any, index: Any) -> Any: ...
    def createEditor(self: Self, parent: Any, option: Any, index: Any) -> Any: ...
    def updateEditorGeometry(self: Self, editor: Any, option: Any, index: Any) -> Any: ...
    def setEditorData(self: Self, editor: Any, index: Any) -> Any: ...
    def setModelData(self: Self, editor: Any, model: Any, index: Any) -> Any: ...
    def eventFilter(self: Self, obj: Any, event: Any) -> Any: ...

class DeletionThread(QThread):
    def __init__(self: Self, paths: Any, permanently: Any) -> None: ...
    def run(self: Self) -> Any: ...

class ItemsZipper:
    def __init__(self: Self, items_paths: Any, zip_dest_file_path: Any, recursive: Any, user_communications_ui: Any) -> None: ...
    def run(self: Self) -> Any: ...
    def show_message_box(self: Self) -> Any: ...
    def zipping_finished(self: Self, success: Any) -> Any: ...

class ItemsZipThread(QThread):
    def __init__(self: Self, items_paths: Any, zip_dest_file_path: Any, recursive: Any, user_communications_ui: Any) -> None: ...
    def run(self: Self) -> Any: ...
    def zip_items(self: Self, item_paths: list[str], zip_dest_file_path: str, recursive: bool) -> Any: ...

class PrefixSuffixChangeInSelectedItems(QDialog):
    def __init__(self: Self) -> None: ...
    def prefix(self: Self) -> Any: ...
    def suffix(self: Self) -> Any: ...
    def on_ok_clicked(self: Self) -> Any: ...
    def on_cancel_clicked(self: Self) -> Any: ...

class ReplaceTextInSelectedItems(QDialog):
    def __init__(self: Self, type: str) -> None: ...
    def existing_text(self: Self) -> Any: ...
    def new_text(self: Self) -> Any: ...
    def on_ok_clicked(self: Self) -> Any: ...
    def on_cancel_clicked(self: Self) -> Any: ...

def validate_name_change_is_approved(old_text: Any, new_text: Any, item_already_exists: Any) -> Any:
    ...


__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import os
import zipfile
import PySide6
import PySide6.QtGui
import PySide6.QtCore
import src
import src.shared
import src.shared.vars
import src.utils
import src.utils.os_utils
import src.utils.utils
import PySide6.QtWidgets
import src.ui_components
import src.ui_components.misc_widgets
import src.ui_components.misc_widgets.dialogs_and_messages
import posixpath