# This file was generated by Nuitka

# Stubs included by default
from __future__ import annotations
from PySide6 import QtCore, QtWidgets
from PySide6.QtCore import QItemSelection, QItemSelectionModel, QMimeData, QRect, QSize, QUrl, Qt
from PySide6.QtGui import QColor, QDrag, QFont, QKeySequence, QPixmap
from PySide6.QtWidgets import QAbstractItemView, QApplication, QHeaderView, QMessageBox, QScrollBar, QTableView
from src.non_ui_components.user_actions import UserAction_CreateItem, UserAction_RenameItem
from src.shared.locations import APPLICATION_DIRECTORIES, DRAGGING_ICON, ICONS_DIR
from src.shared.vars import conf_manager, extensions_to_icons_mapper, logger, threads_server
from src.ui_components.misc_widgets.context_menu import ContextMenuDelegate
from src.ui_components.misc_widgets.dialogs_and_messages import QDialogFreeTextButtons, message_box_w_arrow_keys_enabled, prompt_message
from src.ui_components.misc_widgets.misc_widgets import QFileDialogWithCheckbox
from src.ui_components.misc_widgets.properties_window import PropertiesWindowMultipleItems, PropertiesWindowSingleItem
from src.utils.file_explorer_utils import DeletionThread, ItemsZipper, MyStyledItem, PrefixSuffixChangeInSelectedItems, ReplaceTextInSelectedItems, RowSelectionExtender, map_shortcut_name_to_func, next_new_dir_name, paths_history, validate_name_change_is_approved
from src.utils.os_utils import beautify_bytes_size, dir_, extract_extension_from_path, extract_filename_from_path, get_all_items_in_path, get_dataframe_of_file_names_in_directory, get_item_date_modified, is_dir, is_path_an_app, is_root, parent_directory, rename_file_or_dir, run_file_in_terminal, save_app_icon_in_app_icons_dir
from src.utils.utils import SinglePathQFileSystemWatcherWithContextManager, create_qaction_key_sequence, map_key_to_new_row_num, single_run_qtimer
from typing import Any
from typing_extensions import Self
import datetime
import numpy
import os.path
import time

class FileExplorerTable(QTableView):
    def __init__(self: Self, data_model: QtCore.QAbstractTableModel, root_dir_path: str, xdim: int, ydim: int, parent: Any, encompassing_ui: Any) -> None: ...
    def path(self: Self) -> Any: ...
    def source_data(self: Self) -> Any: ...
    def num_items(self: Self) -> Any: ...
    def encompassing_uis_manager(self: Self) -> Any: ...
    def first_selected_item_index(self: Self) -> Any: ...
    def currently_selected_filename_indices(self: Self) -> Any: ...
    def currently_selected_filenames(self: Self) -> Any: ...
    def total_size_of_selected_files(self: Self) -> Any: ...
    def selected_item_path(self: Self) -> Any: ...
    def selected_items_paths(self: Self) -> Any: ...
    def refresh_display_for_items(self: Self, from_row: int, to_row: int) -> Any: ...
    def row_nums_where_items_texts_are(self: Self, txts_list: list[str]) -> Any: ...
    def index_at_row_and_col(self: Self, row_num: int, col_num: int) -> QtCore.QModelIndex: ...
    def index_of_item_name(self: Self, item_name: str) -> Any: ...
    def _retrieve_only_filename_indices(self: Self, indices: list[QtCore.QModelIndex]) -> Any: ...
    def _extract_item_rows_from_indices(self: Self, indices: list[QtCore.QModelIndex]) -> Any: ...
    def _extract_full_paths_from_indices(self: Self, indices: list[QtCore.QModelIndex]) -> Any: ...
    def get_filenames_from_indices(self: Self, indices: list[QtCore.QModelIndex]) -> Any: ...
    def get_full_path_of_index(self: Self, index: QtCore.QModelIndex) -> Any: ...
    def select_rows(self: Self, start_row: int, end_row: int) -> Any: ...
    def select_row_where_item_text_is(self: Self, txt: str) -> Any: ...
    def select_rows_where_items_texts_are(self: Self, txts_list: list[str]) -> Any: ...
    def delayed_select_rows_where_items_texts_are(self: Self, new_items_names: Any, delay: Any) -> Any: ...
    def update_structure_changed(self: Self) -> Any: ...
    def adapt_width_of_last_column(self: Self) -> Any: ...
    def keep_last_action(self: Self, action: Any) -> Any: ...
    def undo_last_action(self: Self) -> Any: ...
    def redo_last_undone_action(self: Self) -> Any: ...
    def mousePressEvent(self: Self, event: Any) -> Any: ...
    def mouseMoveEvent(self: Self, event: Any) -> Any: ...
    def mouseReleaseEvent(self: Self, event: Any) -> Any: ...
    def dragMoveEvent(self: Self, event: Any) -> Any: ...
    def dragEnterEvent(self: Self, event: Any) -> Any: ...
    def startDrag(self: Self, index: Any) -> Any: ...
    def dropEvent(self: Self, event: Any) -> Any: ...
    def select_items_within_rubber_band(self: Self) -> Any: ...
    def contextMenuEvent(self: Self, event: Any) -> Any: ...
    def open_item_from_context_menu(self: Self) -> Any: ...
    def add_prefix_or_suffix_to_items_names(self: Self) -> Any: ...
    def replace_substring_in_items_names(self: Self) -> Any: ...
    def delete_substring_from_items_names(self: Self) -> Any: ...
    def replace_substring_in_selected_names_aux(self: Self, old_text: str, new_text: str) -> list[str]: ...
    def replace_item_name(self: Self, old_text: str, new_text: str) -> Any: ...
    def rename_item(self: Self) -> Any: ...
    def make_sure_user_wants_to_remove_items(self: Self, permanently: bool) -> Any: ...
    def _remove_items(self: Self, permanently: bool) -> Any: ...
    def remove_items(self: Self) -> Any: ...
    def permanently_remove_items(self: Self) -> Any: ...
    def open_properties(self: Self) -> Any: ...
    def keep_selection_as_prev(self: Self, indices: list[QtCore.QModelIndex]) -> Any: ...
    def change_path(self: Self, new_path: str, reset_path_history: bool, direction: int, reset_tree_selection: bool, selected_path_after_change: str) -> Any: ...
    def create_new_dir(self: Self) -> Any: ...
    def add_new_ui(self: Self) -> Any: ...
    def open_item(self: Self, item_path: str, app_name: str) -> Any: ...
    def on_enter(self: Self) -> Any: ...
    def open_file_with_specified_app(self: Self, full_file_path: str) -> Any: ...
    def set_default_app_for_files_with_extension(self: Self, path_of_file_with_ext: str, app_path: str) -> Any: ...
    def invoke_filename_editor(self: Self) -> Any: ...
    def on_selectionChanged(self: Self, selected: Any, deselected: Any) -> Any: ...
    def on_clicked(self: Self, index: Any) -> Any: ...
    def on_doubleClicked(self: Self, index: Any) -> Any: ...
    def copy_selected_items_to_clipboard(self: Self) -> Any: ...
    def copy_item_path_to_clipboard(self: Self) -> Any: ...
    def copy_current_path_to_clipboard(self: Self) -> Any: ...
    def paste_items_from_clipboard(self: Self) -> Any: ...
    def cut_item(self: Self) -> Any: ...
    def make_cut_items_greyed_out(self: Self) -> Any: ...
    def on_escape(self: Self) -> Any: ...
    def cancel_cut_items(self: Self) -> Any: ...
    def go_to_previous_path(self: Self) -> Any: ...
    def go_to_next_path(self: Self) -> Any: ...
    def go_to_parent_dir(self: Self) -> Any: ...
    def extend_selection_downwards(self: Self) -> Any: ...
    def extend_selection_upwards(self: Self) -> Any: ...
    def select_all(self: Self) -> Any: ...
    def go_to_item_starting_with_string(self: Self, st: str) -> Any: ...
    def initialize_all_key_sequences(self: Self) -> Any: ...
    def select_all_items_from_curr_to_end(self: Self) -> Any: ...
    def select_all_items_from_curr_to_head(self: Self) -> Any: ...
    def keyPressEvent(self: Self, e: Any) -> Any: ...
    def on_header_clicked(self: Self, col: Any) -> Any: ...
    def format_headers(self: Self, cols_to_hide: list[int]) -> Any: ...
    def _configure_headers(self: Self) -> Any: ...
    def _set_cols_widths(self: Self) -> Any: ...
    def _refresh_source_data(self: Self) -> Any: ...
    def zip_items(self: Self, indices_to_zip: list[QtCore.QModelIndex]) -> Any: ...
    def refresh_all_configurations(self: Self) -> Any: ...
    def set_scrollbars(self: Self) -> Any: ...
    def sizeHint(self: Self) -> Any: ...
    def connect_filesystem_watcher(self: Self) -> Any: ...


__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import posixpath
import time
import numpy
import datetime
import PySide6
import PySide6.QtGui
import PySide6.QtCore
import PySide6.QtWidgets
import src
import src.ui_components
import src.ui_components.misc_widgets
import src.ui_components.misc_widgets.properties_window
import src.ui_components.misc_widgets.dialogs_and_messages
import src.ui_components.misc_widgets.misc_widgets
import src.non_ui_components
import src.non_ui_components.user_actions
import src.shared
import src.shared.locations
import src.shared.vars
import src.utils
import src.utils.os_utils
import src.utils.utils
import src.utils.file_explorer_utils
import src.ui_components.misc_widgets.context_menu