# This file was generated by Nuitka

# Stubs included by default
from __future__ import annotations
from PySide6 import QtCore
from PySide6.QtCore import QEvent, Qt
from PySide6.QtGui import QAction, QIcon
from PySide6.QtWidgets import QAbstractItemView, QColorDialog, QDialogButtonBox, QFileDialog, QLabel, QMainWindow, QMenu, QMenuBar, QPushButton, QTableView, QVBoxLayout, QWidget
from src.data_models import SimplePandasModel2
from src.shared.vars import conf_manager
from src.ui_components.misc_widgets.dialogs_and_messages import CustomQDialogButtonBox, QDialogButtonsAndWidgets
from src.ui_components.misc_widgets.misc_widgets import DropdownTextValues
from src.ui_components.misc_widgets.shortcut_keys_configuration import KeyboardShortcutSelectorUi, LabelsSelectionPerCategory
from src.utils.os_utils import extract_extension_from_path, extract_filename_from_path
from src.utils.utils import get_full_icon_path, is_legal_key_sequence
from typing import Any
from typing_extensions import Self
import pandas

class color_picker:
    def __init__(self: Self, row: int, styles_tbl: QTableView) -> None: ...
    def __call__(self: Self) -> Any: ...

class folder_picker:
    def __init__(self: Self, row: int, styles_tbl: QTableView) -> None: ...
    def __call__(self: Self) -> Any: ...

class date_format_picker:
    def __init__(self: Self, row: int, styles_tbl: QTableView, curr_format: str) -> None: ...
    def __call__(self: Self) -> Any: ...

class font_picker:
    def __init__(self: Self, row: int, styles_tbl: QTableView) -> None: ...
    def __call__(self: Self) -> Any: ...

def populate_menubar_and_connect_triggers(ui_obj: QMainWindow, menubar_manager: Any) -> Any:
    ...

class CloseOnEscapeEventFilter:
    def __init__(self: Self, q_main_window_obj: Any) -> None: ...
    def eventFilter(self: Self, source: Any, event: Any) -> Any: ...

class MebuBarManager(QMainWindow):
    def __init__(self: Self, ui: Any) -> None: ...
    def configure_keyboard_shortcuts(self: Self) -> Any: ...
    def run_show_hide_left_pane(self: Self) -> Any: ...
    def configure_keymap(self: Self) -> Any: ...
    def keymap_menu_clicked_ok(self: Self) -> Any: ...
    def keymap_menu_clicked_cancel(self: Self) -> Any: ...
    def keymap_menu_clicked_apply(self: Self) -> Any: ...
    def update_keymap_in_configure_file(self: Self, changed_keymap_df: pd.DataFrame) -> Any: ...
    def restore_default_keymap(self: Self) -> Any: ...
    def configure_styles(self: Self) -> Any: ...
    def styles_menu_clicked_ok(self: Self) -> Any: ...
    def styles_menu_clicked_cancel(self: Self) -> Any: ...
    def styles_menu_clicked_apply(self: Self) -> Any: ...
    def restore_default_styles(self: Self) -> Any: ...
    def update_styles_in_configure_file(self: Self, styles_df: pd.DataFrame) -> Any: ...
    def new_folder(self: Self) -> Any: ...
    def new_file(self: Self) -> Any: ...
    def save_action(self: Self) -> Any: ...
    def copy_action(self: Self) -> Any: ...
    def paste_action(self: Self) -> Any: ...


__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import pandas
import PySide6
import PySide6.QtWidgets
import PySide6.QtCore
import PySide6.QtGui
import src
import src.data_models
import src.shared
import src.shared.vars
import src.utils
import src.utils.utils
import src.utils.os_utils
import src.ui_components
import src.ui_components.misc_widgets
import src.ui_components.misc_widgets.shortcut_keys_configuration
import src.ui_components.misc_widgets.dialogs_and_messages
import src.ui_components.misc_widgets.misc_widgets